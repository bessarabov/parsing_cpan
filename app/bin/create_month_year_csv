#!/usr/bin/perl

=encoding UTF-8
=cut

=head1 DESCRIPTION

=cut

# common modules
use strict;
use warnings FATAL => 'all';
use feature 'say';
use utf8;
use open qw(:std :utf8);

use Moment;
use Path::Tiny;

# global vars

# subs
# main
sub main {

    my @lines = path('/app/bin/releases_date.csv')->lines({chomp => 1});

    my %year_month;
    my %year;

    my $header = shift @lines;
    foreach my $line (@lines) {
        my @parsed = split /,/, $line;
        my $moment = Moment->new( iso_string => $parsed[0] . 'T00:00:00Z');

        my $key = sprintf('%s-%02d', $moment->get_year(), $moment->get_month());
        my @v = @{$year_month{ $key } // []};
        foreach my $i (1..4) {
            $v[$i-1] //= 0;
            $v[$i-1] += $parsed[$i];
        }
        $year_month{ $key } = \@v;

        my $key2 = $moment->get_year();
        my @v2 = @{$year{ $key2 } //[]};
        foreach my $i (1..4) {
            $v2[$i-1] //= 0;
            $v2[$i-1] += $parsed[$i];
        }
        $year{ $key2 } = \@v2;
    }

    my $year_month_content = $header . "\n";
    foreach my $el (sort keys %year_month) {
        $year_month_content .= join(",", $el, @{$year_month{$el}}) . "\n";
    }
    path('/app/bin/releases_year_month.csv')->spew($year_month_content);

    my $year_content = $header . "\n";
    foreach my $el (sort keys %year) {
        $year_content .= join(",", $el, @{$year{$el}}) . "\n";
    }
    path('/app/bin/releases_year.csv')->spew($year_content);

    say '#END';
}
main();
__END__
